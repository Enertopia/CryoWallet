import android.content.Context
import android.content.DialogInterface
import android.content.Intent
import android.os.Build
import android.os.Bundle
import androidx.annotation.RequiresApi
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import android.security.keystore.KeyGenParameterSpec
import android.security.keystore.KeyProperties
import android.security.keystore.KeyProtection
import android.util.Log
import java.security.Key
import java.security.KeyPairGenerator
import java.security.KeyStore
import java.security.PrivateKey
import java.util.logging.Logger
import javax.crypto.KeyGenerator
import kotlin.math.pow

/**
 * CryoWallet - Cold Wallet Application
 * Copyright (c) 2023 Emiliano German Solazzi Griminger. All rights reserved.
 */
class ColdWalletActivity : AppCompatActivity() {

    private lateinit var sp: SecureProcessor
    private lateinit var secureEnclave: SecureEnclave
    private lateinit var coldWallet: ColdWallet
    private lateinit var airplaneModeManager: AirplaneModeManager

    private val KEYSTORE_PROVIDER = "AndroidKeyStore"
    private val KEY_ALIAS = "MySecureKey"

    @RequiresApi(Build.VERSION_CODES.M)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_cold_wallet)

        // Initialize components
        initializeComponents()

        // Prompt user to turn on airplane mode and explain the benefits
        promptAirplaneMode()
    }

    @RequiresApi(Build.VERSION_CODES.M)
    private fun initializeComponents() {
        sp = SecureProcessor()
        secureEnclave = SecureEnclave()
        coldWallet = ColdWallet()
        airplaneModeManager = AirplaneModeManager(this)
    }

    @RequiresApi(Build.VERSION_CODES.M)
    private fun promptAirplaneMode() {
        val builder = AlertDialog.Builder(this)
        builder.setTitle("Airplane Mode")
        builder.setMessage("To enhance security, it is recommended to turn on Airplane Mode. Do you want to proceed with Airplane Mode?")
        builder.setPositiveButton("Yes") { dialog, which -> handleAirplaneModeDecision(true) }
        builder.setNegativeButton("No") { dialog, which -> handleAirplaneModeDecision(false) }
        builder.setOnCancelListener { dialog -> handleAirplaneModeDecision(false) }
        builder.setCancelable(false) // User must make a choice
        builder.show()
    }

    @RequiresApi(Build.VERSION_CODES.M)
    private fun handleAirplaneModeDecision(enableAirplaneMode: Boolean) {
        if (enableAirplaneMode) {
            try {
                airplaneModeManager.activateAirplaneMode()
            } catch (e: Exception) {
                handleException("Error activating Airplane Mode", e)
            }
        }
        setUsbConnectivity(true)
        generateWalletOffline()
    }

    @RequiresApi(Build.VERSION_CODES.M)
    private fun generateWalletOffline() {
        try {
            val privateKey = generatePrivateKey()
            val mnemonic = generateMnemonic()

            secureEnclave.storeKey(privateKey, mnemonic)

            // Display mnemonic for user backup (Example: Print to log)
            Logger.getLogger(ColdWalletActivity::class.java.name).info("Generated Mnemonic: $mnemonic")

            // Additional advanced features
            val result = improvedMathCalculation()
            Logger.getLogger(ColdWalletActivity::class.java.name).info("Improved Math Result: $result")
        } catch (e: Exception) {
            handleException("Error generating wallet", e)
        }
    }

    @RequiresApi(Build.VERSION_CODES.M)
    private fun generatePrivateKey(): Key {
        val keyStore = KeyStore.getInstance(KEYSTORE_PROVIDER)
        keyStore.load(null)

        if (!keyStore.containsAlias(KEY_ALIAS)) {
            val keyPairGenerator = KeyPairGenerator.getInstance(
                KeyProperties.KEY_ALGORITHM_RSA, KEYSTORE_PROVIDER
            )

            keyPairGenerator.initialize(
                KeyGenParameterSpec.Builder(
                    KEY_ALIAS,
                    KeyProperties.PURPOSE_SIGN or KeyProperties.PURPOSE_ENCRYPT
                )
                    .setKeySize(2048)
                    .setDigests(KeyProperties.DIGEST_SHA256)
                    .build()
            )

            keyPairGenerator.generateKeyPair()
        }

        return keyStore.getKey(KEY_ALIAS, null)
    }

    @RequiresApi(Build.VERSION_CODES.M)
    private fun generateMnemonic(): String {
        try {
            val entropy = Bip39JavaUtils.generateEntropy(128)
            return Bip39JavaUtils.generateMnemonic(entropy)
        } catch (e: Exception) {
            handleException("Error generating mnemonic", e)
            return ""
        }
    }

    private fun improvedMathCalculation(): Double {
        // Replace this with your specific mathematical logic
        return 2.0.pow(3.0) + Math.log10(100.0)
    }

    override fun onStop() {
        super.onStop()
        try {
            disableAirplaneMode()
        } catch (e: Exception) {
            handleException("Error deactivating Airplane Mode", e)
        }
        restoreUSBConnectivity()
    }

    private fun disableAirplaneMode() {
        try {
            airplaneModeManager.deactivateAirplaneMode()
        } catch (e: Exception) {
            handleException("Error deactivating Airplane Mode", e)
        }
    }

    private fun restoreUSBConnectivity() {
        // Implement USB connectivity restoration if needed
    }

    private fun handleException(message: String, e: Exception) {
        Logger.getLogger(ColdWalletActivity::class.java.name).severe("$message: ${e.message}")
        // You might want to inform the user or log the error
    }
}

